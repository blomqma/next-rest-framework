import { type OpenAPIV3_1 } from 'openapi-types';
import { type FormDataContentType } from './types';

export const DEFAULT_ERRORS = {
  unexpectedError: 'An unknown error occurred, trying again might help.',
  methodNotAllowed: 'Method not allowed.',
  notFound: 'Not found.',
  notImplemented: 'Not implemented.',
  invalidMediaType: 'Invalid media type.',
  operationNotAllowed: 'Operation not allowed.',
  invalidRequestBody: 'Invalid request body.',
  invalidQueryParameters: 'Invalid query parameters.',
  invalidPathParameters: 'Invalid path parameters.'
};

export enum ValidMethod {
  GET = 'GET',
  PUT = 'PUT',
  POST = 'POST',
  DELETE = 'DELETE',
  OPTIONS = 'OPTIONS',
  HEAD = 'HEAD',
  PATCH = 'PATCH'
}

// Ignore: We don't want to use promises here to avoid making this an async function.
// eslint-disable-next-line @typescript-eslint/no-var-requires
export const VERSION = require('../package.json').version;

// eslint-disable-next-line @typescript-eslint/no-var-requires
export const HOMEPAGE = require('../package.json').homepage;

export const DEFAULT_TITLE = 'Next REST Framework';

export const DEFAULT_OG_TYPE = 'website';

export const DEFAULT_DESCRIPTION =
  'This is an autogenerated documentation by Next REST Framework.';

export const DEFAULT_FAVICON_URL =
  'https://raw.githubusercontent.com/blomqma/next-rest-framework/main/docs/static/img/favicon.ico';

export const DEFAULT_LOGO_URL =
  'https://raw.githubusercontent.com/blomqma/next-rest-framework/d02224b38d07ede85257b22ed50159a947681f99/packages/next-rest-framework/logo.svg';

export const FORM_DATA_CONTENT_TYPES_THAT_SUPPORT_VALIDATION: FormDataContentType[] =
  ['multipart/form-data', 'application/x-www-form-urlencoded'];

export const MESSAGE_WITH_ERRORS_SCHEMA: OpenAPIV3_1.SchemaObject = {
  type: 'object',
  properties: {
    message: { type: 'string' },
    errors: {
      type: 'array',
      items: {
        type: 'object',
        required: ['code', 'path', 'message'],
        properties: {
          code: {
            type: 'string',
            description: 'Discriminator field for the Zod issue type.'
          },
          path: {
            type: 'array',
            items: {
              oneOf: [
                {
                  type: 'string'
                },
                {
                  type: 'number'
                }
              ]
            },
            description:
              'Path to the error in the validated object, represented as an array of strings and/or numbers.'
          },
          message: {
            type: 'string',
            description:
              'Human-readable message describing the validation error.'
          }
        },
        additionalProperties: true
      }
    }
  },
  required: ['message'],
  additionalProperties: false
};

export const INVALID_REQUEST_BODY_RESPONSE: OpenAPIV3_1.ResponseObject = {
  description: DEFAULT_ERRORS.invalidRequestBody,
  content: {
    'application/json': {
      schema: {
        $ref: `#/components/schemas/MessageWithErrors`
      }
    }
  }
};

export const ERROR_MESSAGE_SCHEMA: OpenAPIV3_1.SchemaObject = {
  type: 'object',
  properties: {
    message: { type: 'string' }
  },
  additionalProperties: false
};

export const UNEXPECTED_ERROR_RESPONSE: OpenAPIV3_1.ResponseObject = {
  description: DEFAULT_ERRORS.unexpectedError,
  content: {
    'application/json': {
      schema: {
        $ref: `#/components/schemas/ErrorMessage`
      }
    }
  }
};

export const INVALID_RPC_REQUEST_RESPONSE: OpenAPIV3_1.ResponseObject = {
  description: 'Error response.',
  content: {
    'application/json': {
      schema: {
        oneOf: [
          {
            description: DEFAULT_ERRORS.invalidRequestBody,
            $ref: `#/components/schemas/MessageWithErrors`
          },
          {
            description: DEFAULT_ERRORS.unexpectedError,
            $ref: `#/components/schemas/ErrorMessage`
          }
        ]
      }
    }
  }
};

export const INVALID_MEDIA_TYPE_RESPONSE: OpenAPIV3_1.ResponseObject = {
  description: DEFAULT_ERRORS.invalidMediaType,
  content: {
    'application/json': {
      schema: {
        $ref: `#/components/schemas/ErrorMessage`
      }
    }
  },
  headers: {
    Allow: {
      schema: {
        type: 'string'
      }
    }
  }
};

export const INVALID_QUERY_PARAMETERS_RESPONSE: OpenAPIV3_1.ResponseObject = {
  description: DEFAULT_ERRORS.invalidQueryParameters,
  content: {
    'application/json': {
      schema: {
        $ref: `#/components/schemas/MessageWithErrors`
      }
    }
  }
};

export const INVALID_PATH_PARAMETERS_RESPONSE: OpenAPIV3_1.ResponseObject = {
  description: DEFAULT_ERRORS.invalidPathParameters,
  content: {
    'application/json': {
      schema: {
        $ref: `#/components/schemas/MessageWithErrors`
      }
    }
  }
};
